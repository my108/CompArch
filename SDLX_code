// module for R tridic
module IRT(
    input [31:0]IR,
    input count,
    input clk,
    input reset,
    output [31:0]Y
    );
    

    wire [31:0]D1,D2;
    wire [29:0]pout;

       Reg_file R(1,IR[15:11],IR[25:21],IR[20:16],Y,clk,reset,D1,D2);
       ALU A(D1,D2,IR[5:0],Y);
       PC P(clk,pout+1,pout,reset);
    endmodule
// module for RI tridic
module RI(
    input [31:0]IR,
    input clk,
    input reset,
    output [31:0]Y
    );
    wire [31:0]D1,D2;
    wire [15:0]se;
    wire [29:0]pout;
    assign se=IR[15]?16'hffff:16'b0;
    Reg_file R(1,IR[20:16],IR[25:21],IR[25:21],Y,clk,reset,D1,D2);
    ALU A(D1,{se,IR[15:0]},IR[31:26],Y);
    PC P(clk,pout+1,pout,reset);
endmodule
// module for R dyadic
module RI(
    input [31:0]IR,
    input clk,
    input reset,
    output [31:0]Y
    );
    wire [31:0]D1,D2;
    wire [15:0]se;
    wire [29:0]pout;
    assign se=IR[15]?16'hffff:16'b0;
    Reg_file R(1,IR[20:16],IR[25:21],IR[25:21],Y,clk,reset,D1,D2);
    ALU A(D1,{se,IR[15:0]},IR[31:26],Y);
    PC P(clk,pout+1,pout,reset);
endmodule
// module for processor
module SDLX(
    input [15:0]in,
    input clk,
    input reset,
    input count,
    input show,
    input [1:0]type,
    output [15:0]Y
    );
    reg counter;
    reg typer1;
    reg typer2;
    wire[31:0]y,a,b,c; // a for r triadic b for RI and c for r dyadic
    reg [31:0]IR;
    IRT R1(IR,clk,reset,a);
    RI R2(IR,clk,reset,b);
    RDY R3(IR,clk,reset,c);
    assign y = typer1? c : (typer2? b : a);
    assign Y= show? y[31:16] : y[15:0];
    always@(posedge clk)
        begin
            if(reset)begin
                counter<=0;
                typer1<=0;
                typer2<=0;
            end
            else begin
                if(count) counter<=1;
                if(counter) IR[31:16]<=in;
                else IR[15:0]<=in;
                if(type>1) typer1<=1;
                else if(type==1) typer2<=1;
            end
        end
endmodule
